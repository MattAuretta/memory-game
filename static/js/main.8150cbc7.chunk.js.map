{"version":3,"sources":["logo.svg","components/Wrapper/index.js","components/NavBar/index.js","components/Jumbotron/index.js","components/CharacterCard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","props","react_default","a","createElement","className","children","NavBar","messageClass","gameMessage","id","score","highscore","Jumbotron","CharcterCard","value","onClick","handleClick","src","image","alt","name","App","state","clicked","event","_this","setState","Object","toConsumableArray","concat","target","includes","Math","max","setHighScore","shuffleArray","characters","this","i","length","j","floor","random","_ref","newScore","newHighScore","_this2","components_Wrapper","components_NavBar","components_Jumbotron","map","character","CharacterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+wBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6QCOzBC,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCe1BC,MAhBf,SAAgBN,GACZ,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAClBH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,EAAMO,cAChBP,EAAMQ,aAEXP,EAAAC,EAAAC,cAAA,MAAIM,GAAG,SAAP,UACYT,EAAMU,MADlB,kBACwCV,EAAMW,oBCD3CC,MATf,SAAmBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACxBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,2FCQWU,SAZM,SAAAb,GAAK,OAEtBC,EAAAC,EAAAC,cAAA,OACIC,UAAWJ,EAAMI,UACjBU,MAAOd,EAAMS,GACbM,QAASf,EAAMgB,aAEff,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAea,IAAKjB,EAAMkB,MAAOC,IAAKnB,EAAMoB,iBCsFpDC,6MAtFbC,MAAQ,CACNC,QAAS,GACTb,MAAO,EACPC,UAAW,EACXH,YAAa,GACbD,aAAc,MAUhBS,YAAc,SAACQ,GACbC,EAAKC,SAAS,CAEZH,QAAQI,OAAAC,EAAA,EAAAD,CAAKF,EAAKH,MAAMC,SAAjBM,OAAA,CAA0BL,EAAMM,OAAOX,QAG5CM,EAAKH,MAAMC,QAAQQ,SAASP,EAAMM,OAAOX,KAC3CM,EAAKC,SAAS,CACZlB,YAAa,2BACbE,MAAO,EACPa,QAAS,GACThB,aAAc,cAIhBkB,EAAKC,SAAS,CACZlB,YAAa,yBACbE,MAAOe,EAAKH,MAAMZ,MAAQ,EAC1BC,UAAWqB,KAAKC,IAAIR,EAAKH,MAAMZ,MAAQ,GACvCH,aAAc,YAGlBkB,EAAKS,eACLT,EAAKU,aAAaC,uFA5BlBC,KAAKX,SAAS,CACZlB,YAAa,kEA8BJ4B,GACX,IAAK,IAAIE,EAAIF,EAAWG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAME,EAAIR,KAAKS,MAAMT,KAAKU,UAAYJ,EAAI,IADIK,EAEb,CAACP,EAAWI,GAAIJ,EAAWE,IAA3DF,EAAWE,GAFkCK,EAAA,GAE9BP,EAAWI,GAFmBG,EAAA,2CAOhD,IAAIC,EAAWP,KAAKf,MAAMZ,MACtBmC,EAAeR,KAAKf,MAAMX,UAC3BkC,EAAeD,GAChBP,KAAKX,SAAS,CACVf,UAAWkC,qCAKV,IAAAC,EAAAT,KACP,OACEpC,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,CACEzC,aAA0C,cAA5B8B,KAAKf,MAAMf,aAA+B,YAA0C,YAA5B8B,KAAKf,MAAMf,aAA6B,UAAY,GAC1HC,YAAa6B,KAAKf,MAAMd,YACxBE,MAAO2B,KAAKf,MAAMZ,MAClBC,UAAW0B,KAAKf,MAAMX,YAExBV,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZgC,EAAWc,IAAI,SAAAC,GAAS,OACvBlD,EAAAC,EAAAC,cAACiD,EAAD,CACEhD,UAAgC,IAArB0C,EAAKxB,MAAMZ,MAAc,aAAe,OACnD2C,IAAKF,EAAU1C,GACfW,KAAM+B,EAAU/B,KAChBF,MAAOiC,EAAUjC,MACjBF,YAAa8B,EAAK9B,0BA7EhBsC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8150cbc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    return <nav className=\"navbar fixed-top\">\r\n        <ul>\r\n            <li className=\"brand\">\r\n                Memory Game\r\n            </li>\r\n            <li className={props.messageClass}>\r\n                {props.gameMessage}\r\n            </li>\r\n            <li id=\"score\">\r\n                Score: {props.score} | High Score: {props.highscore}\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n}\r\n\r\nexport default NavBar","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return <div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h1>Memory Game!</h1>\r\n    <p>Click on a pokemon to earn points, but don't click an image more than once!</p>\r\n  </div>\r\n</div>\r\n}\r\n\r\nexport default Jumbotron","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst CharcterCard = props => (\r\n\r\n    <div\r\n        className={props.className}\r\n        value={props.id}\r\n        onClick={props.handleClick}\r\n    >\r\n        <img className=\"card-img-top\" src={props.image} alt={props.name} />\r\n    </div>\r\n\r\n)\r\n\r\nexport default CharcterCard;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport CharcterCard from \"./components/CharacterCard\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  state = {\n    clicked: [],\n    score: 0,\n    highscore: 0,\n    gameMessage: \"\",\n    messageClass: \"\"\n  };\n\n  //Set initial game message\n  componentDidMount() {\n    this.setState({\n      gameMessage: \"Click an image to begin!\",\n    });\n  };\n\n  handleClick = (event) => {\n    this.setState({\n      //Add the div's alt value to the clicked array\n      clicked: [...this.state.clicked, event.target.alt]\n    });\n    //If the name is already in the clicked array set score back to 0 and empty clicked array\n    if (this.state.clicked.includes(event.target.alt)) {\n      this.setState({\n        gameMessage: \"You guessed incorrectly!\",\n        score: 0,\n        clicked: [],\n        messageClass: \"incorrect\"\n      });\n    } else {\n      //If the name is not in the clicked array, add 1 to the current score\n      this.setState({\n        gameMessage: \"You guessed correctly!\",\n        score: this.state.score + 1,\n        highscore: Math.max(this.state.score + 1),\n        messageClass: \"correct\"\n      })\n    };\n    this.setHighScore();\n    this.shuffleArray(characters);\n  };\n\n  shuffleArray(characters) {\n    for (let i = characters.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [characters[i], characters[j]] = [characters[j], characters[i]];\n    };\n  };\n\n  setHighScore(){\n    let newScore = this.state.score;\n    let newHighScore = this.state.highscore\n    if(newHighScore > newScore){\n      this.setState({\n          highscore: newHighScore\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <NavBar\n          messageClass={this.state.messageClass === \"incorrect\" ? \"incorrect\" : this.state.messageClass === \"correct\" ? \"correct\" : \"\"}\n          gameMessage={this.state.gameMessage}\n          score={this.state.score}\n          highscore={this.state.highscore}\n        />\n        <Jumbotron />\n        <div className=\"container\">\n          <div className=\"row\">\n            {characters.map(character => (\n              <CharcterCard\n                className={this.state.score === 0 ? \"card shake\" : \"card\"}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                handleClick={this.handleClick}\n              ></CharcterCard>\n            ))}\n          </div>\n        </div>\n      </Wrapper>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}